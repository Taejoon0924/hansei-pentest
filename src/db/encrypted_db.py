import os
import sqlite3
import cryptography.fernet as fernet

class EncryptedDB:
    def __init__(self, db_path: str, key: str):
        self.db_path = db_path
        self.key = key
        self.fernet = fernet.Fernet(self.key)

        if not os.path.exists(self.db_path):
            self._create_db()

    def _create_db(self):
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("CREATE TABLE passwords (id INTEGER PRIMARY KEY, encrypted_password TEXT)")

    def add_password(self, password: str):
        encrypted_password = self.fernet.encrypt(password.encode())

        with sqlite3.connect(self.db_path) as conn:
            conn.execute("INSERT INTO passwords (encrypted_password) VALUES (?)", (encrypted_password,))

    def get_passwords(self):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute("SELECT encrypted_password FROM passwords")
            encrypted_passwords = cursor.fetchall()

        return [self.fernet.decrypt(encrypted_password).decode() for encrypted_password, in encrypted_passwords]

