import socket
import subprocess
import logging
from typing import Dict, List

def is_valid_config(config: Dict) -> bool:
    required_keys = [("General", ["start_ip", "end_ip", "username", "command", "timeout", "max_workers"]), ("Passwords", ["passwords_file"])]
    for k1, keys in required_keys:
        if k1 not in config:
            print(f"누락된 키: {k1}")
            return False
        for k2 in keys:
            if k2 not in config[k1]:
                print(f"누락된 키: {k1}.{k2}")
                return False
    return True

def generate_ips(start: str, end: str) -> List[str]:
    start_parts = start.split(".")
    end_parts = end.split(".")
    ips = []
    for i in range(int(start_parts[3]), int(end_parts[3]) + 1):
        ips.append(".".join(start_parts[:3] + [str(i)]))
    return ips

def is_port_open(ip: str, ports: List[int], timeout: int) -> bool:
    for port in ports:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(timeout)
            if s.connect_ex((ip, port)) == 0:
                return True
    return False



def execute_command(ip: str, username: str, password: str, command: str, timeout: int) -> (bool, str, str):
    for port in [135, 139, 445]:
        if is_port_open(ip, [port], timeout):
            break
    else:
        logging.error(f"실패: {ip} - {command} 실행 실패 (비밀번호: {password}) - 모든 포트가 닫혀 있습니다.")
        return False, ip, password

    wmic_command = f'WMIC.EXE /NODE:{ip} /user:{username} /password:{password} process call create "{command}"'
    try:
        with subprocess.Popen(wmic_command, shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE, text=True) as process:
            try:
                stdout, stderr = process.communicate(timeout=timeout)
                if "ReturnValue = 0" in stdout or "완료되었습니다" in stdout:
                    return True, ip, password
                else:
                    logging.error(f"실패: {ip} - {command} 실행 실패 (비밀번호: {password}) - STDOUT: {stdout}, STDERR: {stderr}")
            except subprocess.TimeoutExpired:
                process.kill()
                logging.error(f"시간초과: {ip} - {command} 시간초과 (비밀번호: {password})")
    except Exception as e:
        logging.error(f"오류: {ip} - {command} 오류 (비밀번호: {password}) - {e}")

    return False, ip, password
























