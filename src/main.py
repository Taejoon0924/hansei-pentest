import os
import asyncio
import aiohttp
import logging
import json
import sqlite3
from dotenv import load_dotenv
from utils import is_valid_config, generate_ips, execute_command, is_port_open
from logging_config import setup_logging
from db.encrypted_db import EncryptedDB

load_dotenv()
setup_logging()

async def main():
    with open("config/config.json", "r") as f:
        config = json.load(f)

    if not is_valid_config(config):
        logging.debug("잘못된 구성")
        return

    general_config = config["General"]
    start_ip, end_ip, username, command, timeout, max_workers = [general_config[key] for key in ["start_ip", "end_ip", "username", "command", "timeout", "max_workers"]]
    db_path = os.getenv("DB_PATH")
    db_key = os.getenv("DB_KEY")

    encrypted_db = EncryptedDB(db_path, db_key)
    encrypted_db.create_db()

    # 필요한 경우 비밀번호를 추가합니다.
    # encrypted_db.add_password("your_password")

    passwords = encrypted_db.get_passwords()

    ips = generate_ips(start_ip, end_ip)

    async with aiohttp.ClientSession() as session:
        tasks = [execute_command(session, ip, username, password, command, timeout) for ip in ips for password in passwords if await is_port_open(session, ip, [135, 139, 445], timeout)]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        for result in results:
            if isinstance(result, Exception):
                logging.debug(f"실패: {result}")
            else:
                success, ip, password = result
                if success:
                    logging.debug(f"성공: {ip} - {command} 실행됨 (비밀번호: {password})")
                else:
                    logging.debug(f"실패: {ip} - {command} 실패함 (비밀번호: {password})")

if __name__ == "__main__":
    asyncio.run(main())




































