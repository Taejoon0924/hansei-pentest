import os
import sqlite3
from cryptography.fernet import Fernet

class EncryptedDB:
    def __init__(self, db_path, db_key):
        if len(db_key) != 44:
            raise ValueError("Fernet key must be 32 url-safe base64-encoded bytes.")
        self.db_path = db_path
        self.fernet = Fernet(db_key.encode())

    def create_db(self):
        if not os.path.exists(self.db_path):
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("CREATE TABLE passwords (id INTEGER PRIMARY KEY AUTOINCREMENT, password TEXT NOT NULL)")
                conn.commit()

    def get_passwords(self):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute("SELECT password FROM passwords")
            encrypted_passwords = [row[0] for row in cursor.fetchall()]
        return [self._decrypt_password(ep) for ep in encrypted_passwords]

    def add_password(self, password):
        encrypted_password = self._encrypt_password(password)
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("INSERT INTO passwords (password) VALUES (?)", (encrypted_password,))
            conn.commit()

        def _encrypt_password(self, password):
            return self.fernet.encrypt(password.encode()).decode()

        def _decrypt_password(self, encrypted_password):
            return self.fernet.decrypt(encrypted_password.encode()).decode()




















